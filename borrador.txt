{
  "name": "citoapp2",
  "version": "1.0.0",
  "description": "aplicacion para laboratorios de citologia",
  "main": "src/index.js",
  "scripts": {
      "dev": "nodemon src/index.js",
      "start": "node src/index.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/diobando93/citoapp2.git"
  },
  "author": "Eter",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/diobando93/citoapp2/issues"
  },
  "homepage": "https://github.com/diobando93/citoapp2#readme",
  "dependencies": {
    "electron": "^8.2.1",
    "mongoose": "^5.9.7"
  },
  "devDependencies": {
    "nodemon": "^2.0.2"
  }
}


<div class="row">
  <div class="col-25">
    <label for="fname">Cedula</label>
  </div>
  <div class="col-75">
    <input type="text" id="Ced" name="Cedu" >
  </div>
  <div class="col-25">
    <label for="hcllinica">Historia Clinica</label>
   </div>
   <div class="col-75">
     <input type="text" id="h_clinica" name="h_clinica" >
   </div>
</div>
dcADcadsc




var dropBox2 = document.getElementById("canton");
console.log(dropBox2.length);
if (dropBox2.length > 0){
    for (var i = 0; i < dropBox2.length; i++) {
        dropBox2.options.remove(i);
        console.log(i)
    }
}
ipcRenderer.on('cantones',  (e, args) =>{
    cantonesDB = JSON.parse(args);
    //cantonesDB = args;
    //return cantonesDB;
    //var dropBox2 = document.getElementById("canton");

    for (var key in cantonesDB) {
        dropBox2.options.add(new Option(cantonesDB[key]));
    }

})
//console.log(cantonesDB);
/*
for (var key in cantonesDB) {
    dropBox2.options.add(new Option(cantonesDB[key]));
}
*/




//console.log(pedidogen());
(async () => {
    numPedido = await pedidogen();
    console.log(numPedido);
    //numPedidoarray.push(numPedido);
})()

parte del main sin pantallas

const { BrowserWindow, ipcMain, app } = require("electron");
const { recibir } = require("./pedido_process.js");
const { consultar } = require("./resultado_process.js");
const { doctores } = require("./doctores_process.js");

//falta crear una pantalla por cada icono del menu por ejemplo pantalla pedidos
//como esta el process se confunde

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    heigth: 500,
    webPreferences: {
      nodeIntegration: true,
    },
  });
  win.loadFile("src/ui//templates/main.html");
}

ipcMain.on("envio-datos-paciente", (e, args) => {
  app.allowRendererProcessReuse = false;
  app.whenReady().then(recibir);
});

ipcMain.on("consulta-datos-paciente", (e, args) => {
  app.whenReady().then(consultar);
  app.allowRendererProcessReuse = false;
});

ipcMain.on("medicos-crear-eliminar", (e, args) => {
  app.whenReady().then(doctores);
  app.allowRendererProcessReuse = false;
});

module.exports = { createWindow };




la parte de pedido sin error en el pedidogen
const {ipcMain} = require('electron');
const Patient = require('../models/patient.js');
const Pedido = require('../models/pedido.js');
const Hclinic = require('../models/h_clinic.js');
const Pedidocounter = require('../models/pedidocounter.js');
const Medicos = require('../models/medicos.js');
const validaciones = require('./validaciones.js');
let ecuador = require('ecuador-postal-codes');
let provincias = [];
let cantones = [];
let parroquias = [];
let numPedido = '';
let hClinica = '';
monentoActual = new Date;
hora = monentoActual.getHours();
minuto = monentoActual.getMinutes();
segundo = monentoActual.getSeconds();
hora = hora + " : " + minuto + " : " + segundo;
//recibe datos desde el pedido_render
function recibir(){
    console.log(hora);
    ipcMain.on('cedula', async(e, args) =>{
        console.log(args);
        const hcl = hcgen(args);
        hcl.then(hClinica => {
            console.log(hClinica);
            hClinica = JSON.stringify(hClinica);
            e.reply('hClinica', hClinica);
        });
        //hcgen(args);
        const ped = pedidogen();
        ped.then(numPedido => {
            console.log(numPedido);
            numPedido = JSON.stringify(numPedido);
            e.reply('numPedido', numPedido);
        });
        //numPedido = JSON.stringify(numPedido);
        //console.log(numPedido)
        provincias = provinces();
        e.returnValue = JSON.stringify(provincias);
        ipcMain.on('dropProvincia', async (e, args) =>{
            cantones = canton(args);
            e.returnValue = JSON.stringify(cantones);
            cantones = [];
        });
        ipcMain.on('dropCanton', async(e, args) =>{
            parroquias = parroquia(args);
            e.returnValue = JSON.stringify(parroquias);
        });
    });

    ipcMain.on('dropMedicos', async (e, args) =>{
        console.log(args);
        medicos = []
        let medicos_buscar =  await Medicos.find({institucion: args}, 'nombre apellido').exec();
        for (var key in medicos_buscar ) {
            let nombreCompleto = medicos_buscar[key].nombre
            nombreCompleto = nombreCompleto.concat(' ').concat(medicos_buscar[key].apellido)
            //console.log(nombreCompleto);
            medicos.push(nombreCompleto);
        }
        e.returnValue =JSON.stringify(medicos);
        //console.log(medicos_buscar);
        console.log(medicos);
    });

    ipcMain.on('datos', async (e, args) =>{
        console.log('formulario correcto');
        let envia0 = true;
        let envia1 = true;
        let datosVacios = [args[0], args[1], args[2], args[3], args[4]];
        let datosNumeros = [args[0], args[4]];
        let genHc = args[1];
        let array = [];
        let array2 = [];
        array = genHc.split('-');
        array2 = array[0].split('"');
        console.log(array2[1]);
        //envia0 = validaciones.verificarVacio(datosVacios);
        //envia1 = validaciones.verificarNumero(datosNumeros);

        if (envia0 == true && envia1=== true){
            if (array[1] == 'actualice"'){
                let actualizar = Hclinic.where({_id: '5f1311fef9417d3136858ce8'});
                actualizar.updateOne({$set: {h_clinica: array2[1]}}).exec();
                hClinica = array2[1];
            } else{
                hClinica = args[1]
            }
            //const pedidogenCounter = {
            //    pedido_counter: args[39]
            //}
            //const historiaClinica = {

            //}

            const paciente = {
                fecha: new Date().toISOString().slice(0, 10),
                hora: hora,
                h_clinica: hClinica,
                cedula: args[0],
                apellidos: args[4],
                nombres: args[3],
                f_nacimiento: args[6],
            }
            const pedidoBD = {
                fecha: new Date().toISOString().slice(0, 10),
                hora: hora,
                h_clinica: hClinica,
                cedula: args[0],
                pedido: args[39],
                edad: args[5],
                establecimiento: args[2],
                telefonof: args[16],
                email: args[17],
                telefonof: args[18],
                emailf: args[19],
                ubicacion: {
                    pais: args[7],
                    provincia: args[8],
                    canton: args[9],
                    parroquia: args[10],
                    sector: args[11],
                },
                estudios: {
                    instruccion: args[12],
                    ocupacion: args[13],
                    ins_jefefamilia: args[14],
                    ocu_jefefamilia: args[15],
                },
                f_muestra: args[20],
                fecha_ult_mestruacion: args[21],
                metodo_planificacion: args[22],
                num_partos: args[23],
                num_abortos: args[24],
                inicio_sexo: args[25],
                embarazada: args[26],
                lactancia: args[27],
                destruccion_local: args[28],
                conizacon: args[29],
                histectomia: args[30],
                radioterapia: args[31],
                hormonoterapia: args[32],
                otros: args[33],
                citologia: {
                    Si: args[34],
                    No: args[35],
                    numero: args[36],
                    anios: args[37],
                    meses: args[38]
                }
            }
            let pacienteBuscar = await Patient.find({cedula: args[0]}).exec();
            console.log(pacienteBuscar);
            let verificar = true;
            verificar = isEmpty(pacienteBuscar);
            console.log(verificar);
            if (verificar == true){
                const newPatient =  new Patient(paciente);
                const patientSaved = await newPatient.save();
                console.log('paciente nuevo');
            }else {
                console.log('paciente ya existe')
            }
            const newPedido = new Pedido(pedidoBD);
            const pedidoSaved = await newPedido.save();
            //const newPC = new Pedidocounter(pedidogenCounter);
            //const PCSaved = await newPC.save();
            let actualizarPC = Pedidocounter.where({_id: '5f5802815a5736164e9858a0'});
            actualizarPC.updateOne({$set: {pedido_counter: args[39]}}).exec();
            //const pedidotSaved = await newPedido.save();
            //const newHclinica = new Hclinic(hclinica);
            //const hclinicaSaved = await newHclinica.save();
            //console.log(patientSaved);
            //console.log(pedidoSaved);
            //console.log(hclinicaSaved);
        }else{
            console.log('formulario incorrecto');
        };
    });
}

async function pedidogen(){
    let pedido_buscar =  await Pedidocounter.find({});
    let fecha = new Date().toISOString().slice(0, 10);
    let verificar = false;
    verificar = isEmpty(pedido_buscar);
    if (verificar == true){
        let numero = fecha.split('-');
        numero.push('1');
        numero = numero.join('-');
        return numero;
    }else{
        let counter = pedido_buscar[0];
        let counter1 = counter.pedido_counter;
        counter1 = counter1.split('-');
        fechacompro = '"' +  fecha;
        console.log(pedido_buscar);
        console.log(fechacompro);
        let counter2 = parseInt(counter1[3])+1;
        counter2 = counter2.toString();
        let numero = fecha.split('-');
        numero.push(counter2);
        numero = numero.join('-');
        return numero;
        //console.log(pedido_counter);
    }

}

function isEmpty(obj) {
    for(var key in obj) {
        if(obj.hasOwnProperty(key))
            return false;
    }
    return true;
}

function provinces(){
    let results = ecuador.data.provinces;
    let provincias = [];
    for (var key in results){
        provincias.push(results[key].name);
    }
    return provincias;
}

function canton(args){
    let results =  ecuador.data.lookupProvinces(args);
    results = results[0];
    let canton = [];
    for (var key in results.cities){
        canton.push(results.cities[key].name);
    }
    return canton;
}

function parroquia(args){
    let result = ecuador.data.lookupCities(args);
    results = result[0];
    let parroquia = [];
    for (var key in results.towns){
        parroquia.push(results.towns[key].name);
    }
    return parroquia;
}

async function hcgen(cedula){
    let cedula_buscar =  await Patient.find({cedula: cedula}, 'h_clinica').exec();
    let vereificar = false;
    console.log(cedula_buscar);
    //console.log(typeof(cedula_buscar));
    vereificar = isEmpty(cedula_buscar);
    if (vereificar == true){
        console.log('genere codigo');
        let hclinicaNew = await Hclinic.find({});
        hclinicaNew = hclinicaNew[0];
        let hclinicaNew1 = parseInt(hclinicaNew.h_clinica);
        hclinicaNew1 = hclinicaNew1 + 2;
        hclinicaNew1 = hclinicaNew1.toString();
        hclinicaNew1 = hclinicaNew1.concat('-actualice');
        return hclinicaNew1;
        //let actualizar = Hclinic.where({_id: '5f1311fef9417d3136858ce8'});
        //actualizar.updateOne({$set: {h_clinica: hclinicaNew1}}).exec();
        //return hclinicaNew1;
    } else{
        console.log('envie codigo');
        cedula_buscar = cedula_buscar[0];
        let hclinicaNew2 = cedula_buscar.h_clinica;
        return hclinicaNew2;
        //console.log(cedula_buscar.h_clinica);
    }

}

module.exports = {recibir};



pedido con error en la generacion de pedidos




const { ipcMain } = require("electron");
const Patient = require("../models/patient.js");
const Pedido = require("../models/pedido.js");
const Hclinic = require("../models/h_clinic.js");
const Pedidocounter = require("../models/pedidocounter.js");
const Medicos = require("../models/medicos.js");
const validaciones = require("./validaciones.js");
let ecuador = require("ecuador-postal-codes");
let provincias = [];
let cantones = [];
let parroquias = [];
let numPedido = "";
let hClinica = "";
//let medicosBD = "";
monentoActual = new Date();
hora = monentoActual.getHours();
minuto = monentoActual.getMinutes();
segundo = monentoActual.getSeconds();
hora = hora + " : " + minuto + " : " + segundo;
//recibe datos desde el pedido_render
function recibir() {
  //MAL HACER UNA FUNCION DEL TIEMPOconsole.log(hora);

  //Funcion para recibir el numero de cedula del textbox
  ipcMain.on("cedula", async (e, args) => {
    console.log(args + " numero de cedula ingresado"); // Imprime por consolo el numero de cedula

    const hcl = hcgen(args); // Llamado a la funcion para generar o responder con un numero de historia clinica
    hcl.then((hClinica) => {
      console.log(hClinica + " historia clinica"); // Imprime la historia clinica
      hClinica = JSON.stringify(hClinica);
      e.reply("hClinica", hClinica);
    });

    const ped = pedidogen(); // llamado a la funcion para generar un numero de pedido bug cuando cambie de fecha reiniciar el numero del contador
    ped.then((numPedido) => {
      console.log(numPedido + " numero de pedido"); // imprime el numero del pedido
      numPedido = JSON.stringify(numPedido);
      e.reply("numPedido", numPedido);
    });

    provincias = provinces(); // funcion para consultar las provincias de Ecuador
    e.returnValue = JSON.stringify(provincias);
  });
}

//consulta de cantones
ipcMain.on("dropProvincia", async (e, args) => {
  cantones = canton(args);
  e.returnValue = JSON.stringify(cantones);
  cantones = [];
});

//funcion para consulta de cantones
function canton(args) {
  let results = ecuador.data.lookupProvinces(args);
  results = results[0];
  let canton = [];
  for (var key in results.cities) {
    canton.push(results.cities[key].name);
  }
  return canton;
}

//Consuta de parroquias
ipcMain.on("dropCanton", async (e, args) => {
  parroquias = parroquia(args);
  e.returnValue = JSON.stringify(parroquias);
});

//funcion para consulta de parroquias
function parroquia(args) {
  let result = ecuador.data.lookupCities(args);
  results = result[0];
  let parroquia = [];
  for (var key in results.towns) {
    parroquia.push(results.towns[key].name);
  }
  return parroquia;
}

// funcion para consulta o generacion de historias clinicas
async function hcgen(cedula) {
  let cedula_buscar = await Patient.find(
    { cedula: cedula },
    "h_clinica"
  ).exec();
  let vereificar = false;
  vereificar = isEmpty(cedula_buscar);
  if (vereificar == true) {
    console.log("genere codigo de historia clinica");
    let hclinicaNew = await Hclinic.find({});
    hclinicaNew = hclinicaNew[0];
    let hclinicaNew1 = parseInt(hclinicaNew.h_clinica);
    hclinicaNew1 = hclinicaNew1 + 2;
    hclinicaNew1 = hclinicaNew1.toString();
    hclinicaNew1 = hclinicaNew1.concat("-actualice");
    return hclinicaNew1;
  } else {
    console.log("envie codigo de historia clinica");
    cedula_buscar = cedula_buscar[0];
    let hclinicaNew2 = cedula_buscar.h_clinica;
    return hclinicaNew2;
  }
}

//funcion para generacion de numeros de pedidos
// falta agregar el reinicio de fecha
async function pedidogen() {
  let pedido_buscar = await Pedidocounter.find({});
  let fecha = new Date().toISOString().slice(0, 10);
  let verificar = false;
  verificar = isEmpty(pedido_buscar);
  if (verificar == true) {
    let numero = fecha.split("-");
    numero.push("1");
    numero = numero.join("-");
    return numero;
  } else {
    let counter = pedido_buscar[0];
    let counter1 = counter.pedido_counter;
    counter1 = counter1.split("-");
    fechacompro = '"' + fecha;
    let counter2 = parseInt(counter1[3]) + 1;
    counter2 = counter2.toString();
    let numero = fecha.split("-");
    numero.push(counter2);
    numero = numero.join("-");
    return numero;
  }
}

//funcion para consultar los nombres de los doctors dependiendo del establecimiento
ipcMain.on("dropMedicos", async (e, args) => {
  console.log(args);
  medicos = [];
  let medicos_buscar = await Medicos.find(
    { institucion: args },
    "nombre apellido"
  ).exec();
  for (var key in medicos_buscar) {
    let nombreCompleto =
      medicos_buscar[key].nombre + " " + medicos_buscar[key].apellido;
    medicos.push(nombreCompleto);
  }
  e.returnValue = JSON.stringify(medicos);
});

// funcion para consultar las provincias
function provinces() {
  let results = ecuador.data.provinces;
  let provincias = [];
  for (var key in results) {
    provincias.push(results[key].name);
  }
  return provincias;
}

//funcion para validar los datos del formulario y ademas guardar en la bd de paciente y pedidos
ipcMain.on("datos", async (e, args) => {
  console.log("formulario correcto");
  let envia0 = true;
  let envia1 = true;
  let datosVacios = [args[0], args[1], args[2], args[3], args[4]];
  let datosNumeros = [args[0], args[4]];
  let genHc = args[1];
  let array = [];
  let array2 = [];
  array = genHc.split("-");
  array2 = array[0].split('"');
  console.log(array2[1]);
  //envia0 = validaciones.verificarVacio(datosVacios);
  //envia1 = validaciones.verificarNumero(datosNumeros);

  if (envia0 == true && envia1 === true) {
    if (array[1] == 'actualice"') {
      let actualizar = Hclinic.where({ _id: "5f1311fef9417d3136858ce8" });
      actualizar.updateOne({ $set: { h_clinica: array2[1] } }).exec();
      hClinica = array2[1];
    } else {
      hClinica = args[1];
    }

    const paciente = {
      fecha: new Date().toISOString().slice(0, 10),
      hora: hora, //cambiar con el nuevo dato de la hora
      h_clinica: hClinica,
      cedula: args[0],
      apellidos: args[4],
      nombres: args[3],
      f_nacimiento: args[6],
    };

    const pedidoBD = {
      fecha: new Date().toISOString().slice(0, 10),
      hora: hora, //cambiar con el nuevo dato de la hora
      h_clinica: hClinica,
      cedula: args[0],
      pedido: args[39],
      edad: args[5],
      medico: args[40],
      establecimiento: args[2],
      telefonof: args[16],
      email: args[17],
      telefonof: args[18],
      emailf: args[19],
      ubicacion: {
        pais: args[7],
        provincia: args[8],
        canton: args[9],
        parroquia: args[10],
        sector: args[11],
      },
      estudios: {
        instruccion: args[12],
        ocupacion: args[13],
        ins_jefefamilia: args[14],
        ocu_jefefamilia: args[15],
      },
      f_muestra: args[20],
      fecha_ult_mestruacion: args[21],
      metodo_planificacion: args[22],
      num_partos: args[23],
      num_abortos: args[24],
      inicio_sexo: args[25],
      embarazada: args[26],
      lactancia: args[27],
      destruccion_local: args[28],
      conizacon: args[29],
      histectomia: args[30],
      radioterapia: args[31],
      hormonoterapia: args[32],
      otros: args[33],
      citologia: {
        Si: args[34],
        No: args[35],
        numero: args[36],
        anios: args[37],
        meses: args[38],
      },
    };
    let pacienteBuscar = await Patient.find({ cedula: args[0] }).exec();
    console.log(pacienteBuscar);
    let verificar = true;
    verificar = isEmpty(pacienteBuscar);
    console.log(verificar);
    if (verificar == true) {
      const newPatient = new Patient(paciente);
      const patientSaved = await newPatient.save();
      console.log("paciente nuevo");
    } else {
      console.log("paciente ya existe");
    }
    const newPedido = new Pedido(pedidoBD);
    const pedidoSaved = await newPedido.save();
    //const newPC = new Pedidocounter(pedidogenCounter);
    //const PCSaved = await newPC.save();
    let actualizarPC = Pedidocounter.where({
      _id: "5f5802815a5736164e9858a0",
    });
    actualizarPC.updateOne({ $set: { pedido_counter: args[39] } }).exec();
    //const pedidotSaved = await newPedido.save();
    //const newHclinica = new Hclinic(hclinica);
    //const hclinicaSaved = await newHclinica.save();
    //console.log(patientSaved);
    //console.log(pedidoSaved);
    //console.log(hclinicaSaved);
  } else {
    console.log("formulario incorrecto");
  }
});

function isEmpty(obj) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) return false;
  }
  return true;
}

module.exports = { recibir };
